{"version":3,"sources":["Redux/contacts/cotactsSlice.js","ContactList/ContactsList.js","Forms/AddContactForm.js","App.js","Redux/store.js","index.js"],"names":["contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","body","name","number","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","ContactsList","data","isFetching","className","map","id","type","onClick","color","height","width","Form","onSubmit","event","preventDefault","currentTarget","elements","value","reset","pattern","title","required","App","store","configureStore","reducer","middleware","getDefaultMiddleware","setupListeners","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAEaA,EAAcC,YAAU,CACnCC,YAAa,cACbC,UAAWC,YAAe,CACxBC,QAAS,uDAEXC,SAAU,CAAC,WACXC,UAAW,SAAAC,GAAO,MAAK,CACrBC,cAAeD,EAAQE,MAAM,CAC3BA,MAAO,iBAAM,aACbC,aAAc,CAAC,aAEjBC,cAAeJ,EAAQK,SAAS,CAC9BH,MAAO,SAAAI,GAAS,MAAK,CACnBC,IAAI,aAAD,OAAeD,GAClBE,OAAQ,WAEVC,gBAAiB,CAAC,aAEpBC,cAAeV,EAAQK,SAAS,CAC9BH,MAAO,kBAAuB,CAC5BK,IAAK,YACLC,OAAQ,OACRG,KAAM,CAAEC,KAHH,EAAGA,KAGMC,OAHT,EAASA,UAKhBJ,gBAAiB,CAAC,iBAMtBK,EAGEtB,EAHFsB,sBACAC,EAEEvB,EAFFuB,yBACAC,EACExB,EADFwB,yB,OC5Ba,SAASC,IACtB,MAA6BH,IAArBI,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WACd,EAAwBJ,IAAjBX,EAAP,oBAEA,OACE,qCACGc,GACC,oBAAIE,UAAU,eAAd,SACGF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAIV,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACR,qBAAaO,UAAU,OAAvB,UACE,uBAAMA,UAAU,WAAhB,UACE,uBAAMA,UAAU,WAAhB,UAA4BR,EAA5B,OACA,sBAAMQ,UAAU,UAAhB,SAA2BP,OAG7B,wBACEU,KAAK,SACLC,QAAS,kBAAMpB,EAAckB,IAC7BF,UAAU,SAHZ,sBANOE,QAkBdH,GACC,cAAC,IAAD,CAAQI,KAAK,OAAOE,MAAM,UAAUC,OAAQ,GAAIC,MAAO,QChChD,SAASC,IACtB,MAAwBZ,IAAjBN,EAAP,oBAkBA,OACE,uBAAMmB,SAjBa,SAAAC,GACnBA,EAAMC,iBAEN,IAAMnB,EAAOkB,EAAME,cAAcC,SAASrB,KAAKsB,MACzCrB,EAASiB,EAAME,cAAcC,SAASpB,OAAOqB,MAEnDxB,EAAc,CAAEE,OAAMC,WAEtBiB,EAAME,cAAcG,SASUf,UAAU,OAAxC,UACE,kCACE,sCACA,uBACEG,KAAK,OACLX,KAAK,OACLwB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAKZ,kCACE,wCACA,uBACEf,KAAK,MACLX,KAAK,SACLwB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAKZ,wBAAQf,KAAK,SAASH,UAAU,SAAhC,4B,MCxBSmB,MAjBf,WACE,OACE,sBAAKnB,UAAU,YAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,cAACQ,EAAD,MAEF,qBAAKR,UAAU,oBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,0CAEA,cAACH,EAAD,a,uBCXJuB,EAAQC,YAAe,CAC3BC,QAAQ,eAELlD,EAAYE,YAAcF,EAAYkD,SAGzCC,WAAY,SAAAC,GAAoB,4BAC3BA,KAD2B,CAE9BpD,EAAYmD,gBAIhBE,YAAeL,EAAMM,UAENN,QCXfO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,W","file":"static/js/main.7e55db6d.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://616acc3716e7120017fa10c5.mockapi.io/api/v1',\n  }),\n  tagTypes: ['Contact'],\n  endpoints: builder => ({\n    fetchContacts: builder.query({\n      query: () => '/contacts',\n      providesTags: ['Contact'],\n    }),\n    deleteContact: builder.mutation({\n      query: contactId => ({\n        url: `/contacts/${contactId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n    createContact: builder.mutation({\n      query: ({ name, number }) => ({\n        url: '/contacts',\n        method: 'POST',\n        body: { name, number },\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n  useCreateContactMutation,\n} = contactsApi;\n","import Loader from 'react-loader-spinner';\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n} from '../Redux/contacts/cotactsSlice';\n\nexport default function ContactsList() {\n  const { data, isFetching } = useFetchContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <>\n      {data && (\n        <ul className=\"contactsList\">\n          {data.map(({ id, name, number }) => (\n            <li key={id} className=\"item\">\n              <span className=\"itemText\">\n                <span className=\"itemName\">{name}:</span>\n                <span className=\"itemNum\">{number}</span>\n              </span>\n\n              <button\n                type=\"button\"\n                onClick={() => deleteContact(id)}\n                className=\"button\"\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {isFetching && (\n        <Loader type=\"Oval\" color=\"#00BFFF\" height={80} width={80} />\n      )}\n    </>\n  );\n}\n","import { useCreateContactMutation } from 'Redux/contacts/cotactsSlice';\n\nexport default function Form() {\n  const [createContact] = useCreateContactMutation();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const name = event.currentTarget.elements.name.value;\n    const number = event.currentTarget.elements.number.value;\n\n    createContact({ name, number });\n\n    event.currentTarget.reset();\n\n    // if (items.some(item => item.name === name)) {\n    //   alert(`${name} already exist in contact list`);\n    //   return;\n    // }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <label>\n        <h2>Name</h2>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          //value=\"name\"\n          //onChange={handleChange}\n        />\n      </label>\n      <label>\n        <h2>Number</h2>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          //value=\"number\"\n          //onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\" className=\"button\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\nimport ContactsList from './ContactList/ContactsList';\n//import Filter from './Filter/Filter';\nimport Form from './Forms/AddContactForm';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"formsContainer\">\n        <Form />\n      </div>\n      <div className=\"contactsContainer\">\n        <div className=\"contacts\">\n          <h2>Contacts</h2>\n          {/* <Filter /> */}\n          <ContactsList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { contactsApi } from './contacts/cotactsSlice';\n//import contactsReducer from './contacts/contacts-reducer';\n\nconst store = configureStore({\n  reducer: {\n    //contacts: contactsReducer,\n    [contactsApi.reducerPath]: contactsApi.reducer,\n  },\n\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware(),\n    contactsApi.middleware,\n  ],\n});\n\nsetupListeners(store.dispatch);\n\nexport default store;\n\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\n// //import logger from 'redux-logger';\n// import contactsReducer from './contacts/contacts-reducer';\n\n// const myMiddleware = store => next => action => {\n//   next(action);\n// };\n\n// const middleware = [...getDefaultMiddleware(), myMiddleware];\n\n// const store = configureStore({\n//   reducer: {\n//     contacts: contactsReducer,\n//   },\n//   middleware,\n// });\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}